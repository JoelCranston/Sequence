Joel Cranston
Notes for CL1

Need to:
Add Argument parsing for; -f format, --format=format, -s string, --separator=string, -w --equal-width, and increment
Alter behavior to accept only a single argument, defaulting  first to one
Alter behavior to work with floating point numbers
Add user specified increment; first increment last
Add user specified separator; -s string
    "Separate numbers with string; default is a newline. The output always terminates with a newline."
Add user specified formating; -f format, --format=format 
    "format must contain exactly one of the ‘printf’-style floating point conversion specifications 
    ‘%a’, ‘%e’, ‘%f’, ‘%g’, ‘%A’, ‘%E’, ‘%F’, ‘%G’. The ‘%’ may be followed by zero or more flags taken from 
    the set ‘-+#0 '’, then an optional width containing one or more digits, then an optional precision 
    consisting of a ‘.’ followed by zero or more digits. format may also contain any number of ‘%%’ 
    conversion specifications. All conversion specifications have the same meaning as with ‘printf’."


Notes;
11/1
Got argparse to accept inputs for 'first' 'increment' 'last' with both first and increment optional but
createSeq is broken for some reason now, "Can't convert 'int' object to str implicitly".
11/2
Discovered that argparce was returning strings rather then ints, have to rewrite createSeq to work with floats anyway.
Found an algorithm that produces a generator over floating point numbers.
Set up argparse to return a float or int depending on the presence of a decimal point, and reject non-numerics.
11/8
New Issues:
sequences of floats have rounding errors, 0 .2 .3 prints as 0.1 0.2 0.30000000000000004. 
Negative increment was throwing assert error, should have been for increment of 0 only.
Negative increment displays -0.0 rather then 0.0 even after rounding.
Increment of 0 throws assertion, seq prints starting num indefinitely.
Default display precision should be equal to the precision of the max of the first or increment.
Format string not accepting escape sequences in format string.

createseq is redundant as the sequence is generated by frange.
need to change printseq to use an iterator rather then a list.

New issues;
Format strings using A, are not functional. Unsure of effects of #,0,- in format string.

Notes;
Moved rounding of floats to the number generator
set frange to round floats ot 14 digits to avoid rounding errors.
can't duplicate negative issue zero anymore. Assuming its fixed.


New issues:
Equal width pads zeros to the front of the number after the sign even when it would be better to place a zero after. example -00.0 -00.1, -0.11, -0.12
Some escape sequences do not work in -s string, but then they don't work in seq either. 
    \? prints \?
    \v,\t,\r,\n,\f gets ignored and uses value of first as separator.
    \b actualy inserts a backspace removing the last digit of each num. and messes up further on final line, 2 backspaces.
    \a does not really do anything.
 " " fails, but prints the nums seporated by a space in seq        